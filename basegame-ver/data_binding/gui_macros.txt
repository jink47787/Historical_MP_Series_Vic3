macro = {
    description = "Tests if a int32 is zero or not"
    definition = "IsZero(Value)"
    replace_with = "EqualTo_int32(Value, '(int32)0')"
}

macro = {
    description = "Tests if a int32 is zero or not"
    definition = "NotZero(Value)"
    replace_with = "NotEqualTo_int32(Value, '(int32)0')"
}

macro = {
    description = "Tests if a int64 is zero or not"
    definition = "IsZero_int64(Value)"
    replace_with = "EqualTo_int64(Value, '(int64)0')"
}

macro = {
    description = "Tests if a int64 is zero or not"
    definition = "NotZero_int64(Value)"
    replace_with = "NotEqualTo_int64(Value, '(int64)0')"
}

macro = {
    description = "Tests if a CFixedPoint is zero or not"
    definition = "IsZero_CFixedPoint(Value)"
    replace_with = "EqualTo_CFixedPoint(Value, '(CFixedPoint)0')"
}

macro = {
    description = "Tests if a CFixedPoint is zero or not"
    definition = "NotZero_CFixedPoint(Value)"
    replace_with = "NotEqualTo_CFixedPoint(Value, '(CFixedPoint)0')"
}

macro = {
    description = "Tests if a int32 is greater than zero or not"
    definition = "GreaterThanZero(Value)"
    replace_with = "GreaterThan(Value, '(int32)0')"
}

macro = {
    description = "Tests if a int32 is greater than zero or not"
    definition = "LessThanZero(Value)"
    replace_with = "LessThan(Value, '(int32)0')"
}

macro = {
    description = "Tests if a CFixedPoint is greater than zero or not"
    definition = "GreaterThanZero_CFixedPoint(Value)"
    replace_with = "GreaterThan_CFixedPoint(Value, '(CFixedPoint)0')"
}

macro = {
    description = "Tests if a CFixedPoint is less than zero or not"
    definition = "LessThanZero_CFixedPoint(Value)"
    replace_with = "LessThan_CFixedPoint(Value, '(CFixedPoint)0')"
}

macro = {
    description = "Transforms factor (1.25) to mult (0.25) by subtracting 1 from the value"
    definition = "FactorToMult(Value)"
    replace_with = "Subtract_CFixedPoint(Value, '(CFixedPoint)1')"
}

macro = {
    description = "Change the sign of the value"
    definition = "Negate(Value)"
    replace_with = "Subtract_CFixedPoint('(CFixedPoint)0', Value)"
}

macro = {
    description = "Add a loc key with a trailing newline if a condition is satisfied"
    definition = "MakeLineIf(Condition, LocKey)"
    replace_with = "ConcatIfNeitherEmpty(AddLocalizationIf(Condition, LocKey), Localize( 'NEWLINE' ))"
}

macro = {
    description = "Add a loc key with a double trailing newline if a condition is satisfied"
    definition = "MakeParagraphIf(Condition, LocKey)"
    replace_with = "ConcatIfNeitherEmpty(AddLocalizationIf(Condition, LocKey), Localize( 'DOUBLE_NEWLINE' ))"
}

