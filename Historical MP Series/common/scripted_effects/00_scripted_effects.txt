#	Example:
# 
#	example_effect = {
#		x = 100
#		y = 50
#	}
#
#
#	In a script file:
#
#	effect = {
#		example_effect = yes
#	}
#

relations_hit_with_power_bloc_leaders = {
	if = {
		limit = {
			has_game_started = yes
		}
		
		every_power_bloc = {
			limit = { 
				NOT = { scope:power_bloc ?= this }			
			}
			power_bloc_leader = {
				root = {
					change_relations = { 
						country = prev
						value = {
							add = -5
							if = {
								limit = {
									is_country_type = unrecognized
									prev = { is_country_type = recognized }
								}
								add = -5
							}
						}
					}
				}
			}
		}		
	}
}

save_neighbor_with_state = {
	random_neighbouring_state = {
		limit = {
			owner = {
				$CRITERIA$
			}
		}
		save_scope_as = neighbor_state
		owner = {
			save_scope_as = neighbor_country
		}

		random_neighbouring_state = {
			limit = {
				owner = ROOT
			}
			save_scope_as = neighbor_neighbor_state
		}
	}
}

save_industrialized_pm_building_and_state = {
	random_scope_building = {
		limit = {
			OR = {
				AND = {
					is_building_type = building_textile_mills
					state = {
						OR = {
							is_production_method_active = {
								building_type = building_textile_mills
								production_method = pm_mechanized_looms
							}
							is_production_method_active = {
								building_type = building_textile_mills
								production_method = pm_automatic_power_looms
							}
						}
					}
				}
				AND = {
					is_building_type = building_furniture_manufacturies
					state = {
						OR = {
							is_production_method_active = {
								building_type = building_furniture_manufacturies
								production_method = pm_mechanized_workshops
							}
							is_production_method_active = {
								building_type = building_furniture_manufacturies
								production_method = pm_watertube_boiler_building_furniture_manufacturies
							}
							is_production_method_active = {
								building_type = building_furniture_manufacturies
								production_method = pm_rotary_valve_engine_building_furniture_manufacturies
							}
							is_production_method_active = {
								building_type = building_furniture_manufacturies
								production_method = pm_assembly_lines_building_furniture_manufacturies
							}
						}
					}
				}
				AND = {
					is_building_type = building_tooling_workshops
					state = {
						OR = {
							is_production_method_active = {
								building_type = building_tooling_workshops
								production_method = pm_watertube_boiler_building_tooling_workshops
							}
							is_production_method_active = {
								building_type = building_tooling_workshops
								production_method = pm_rotary_valve_engine_building_tooling_workshops
							}
							is_production_method_active = {
								building_type = building_tooling_workshops
								production_method = pm_assembly_lines_building_tooling_workshops
							}
						}
					}
				}
				AND = {
					is_building_type = building_paper_mills
					state = {
						OR = {
							is_production_method_active = {
								building_type = building_paper_mills
								production_method = pm_watertube_boiler_building_paper_mills
							}
							is_production_method_active = {
								building_type = building_paper_mills
								production_method = pm_rotary_valve_engine_building_paper_mills
							}
						}
					}
				}
				AND = {
					is_building_type = building_steel_mills
					state = {
						OR = {
							is_production_method_active = {
								building_type = building_steel_mills
								production_method = pm_watertube_boiler_building_steel_mills
							}
							is_production_method_active = {
								building_type = building_steel_mills
								production_method = pm_rotary_valve_engine_building_steel_mills
							}
						}
					}
				}
				AND = {
					is_building_type = building_motor_industry
					state = {
						OR = {
							is_production_method_active = {
								building_type = building_motor_industry
								production_method = pm_watertube_boiler_building_motor_industry
							}
							is_production_method_active = {
								building_type = building_motor_industry
								production_method = pm_rotary_valve_engine_building_motor_industry
							}
						}
					}
				}
			}
		}

		save_scope_as = industrialized_pm_building
		state = {
			save_scope_as = industrialized_pm_state
		}
	}
}

warlord_setup_effect = {
	set_country_type = recognized
	
	add_modifier = {
        name = warlords_westernisation
        months = 180
		is_decaying = yes
    }
	
	if = {
		limit = {
			has_global_variable = lost_opium_wars
			NOT = { has_modifier = chinese_opium_addiction }
			game_date <= 1896.01.01
		}
		assign_opium_addiction_penalty = yes
	}
	
	assign_early_warlords_penalty = yes
	
	activate_law = law_type:law_republic
	activate_law = law_type:law_autocracy
	
	add_primary_culture = cu:han
	
	ig:ig_armed_forces = {
		add_ruling_interest_group = yes
		leader = {
			set_character_as_ruler = yes
		}
	}
	
	ig:ig_landowners = {
		remove_ruling_interest_group = yes
	}
		
	every_scope_character = {
		random_list = {
			80 =  {
			}
			20 = {
				add_trait = bandit
			}
		}			
	}
	
	every_state = {
		limit = {
			OR = {
				state_region = {
					is_homeland = cu:han
				}
				state_region = {
					is_homeland = cu:manchu
				}
				state_region = s:STATE_HINGGAN
				state_region = s:STATE_ALXA
				state_region = s:STATE_QINGHAI
			}
		}
		this.state_region = {
			add_claim = root
		}
	}
}
warlord_breakaway_setup_effect = {
	set_country_type = recognized
	add_modifier = {
        name = warlords_westernisation
        months = 180
		is_decaying = yes
    }
	activate_law = law_type:law_republic
	activate_law = law_type:law_autocracy
	
	ig:ig_landowners = { 
		remove_ideology = ideology_paternalistic
		add_ideology = ideology_republican_paternalistic
	}
}

prince_setup_effect = {
	set_country_type = recognized
	add_modifier = {
        name = warlords_westernisation
        months = 180
		is_decaying = yes
    }
	activate_law = law_type:law_monarchy
	activate_law = law_type:law_autocracy
}

#HMPS
mahdist_setup_effect = {
	set_country_type = unrecognized
	add_primary_culture = cu:nuba
	set_state_religion = rel:sunni
	activate_law = law_type:law_theocracy
	activate_law = law_type:law_autocracy
	activate_law = law_type:law_state_religion
	activate_law = law_type:law_national_militia
	activate_law = law_type:law_religious_schools
	activate_law = law_type:law_no_colonial_affairs
	ig:ig_devout = { 
		set_interest_group_name = ig_sunni_madrasahs
	}
	change_institution_investment_level = {
		institution = institution_army_model
		investment = 1
	}
	add_modifier = {
		name = mahdist_happy_igs
		months = 240
	}
}

scripted_effect_parties_emergence = {
	if = {
		limit = {
			country_has_voting_franchise = no
		}
		custom_tooltip = PARTIES_EMERGENCE
	}

	# Will immediately trigger elections and thus update parties so no need to call update_party_support here
}

scripted_effect_parties_disappearence = {
	if = {
		limit = {
			country_has_voting_franchise = yes
		}
		custom_tooltip = PARTIES_DISAPPEARENCE
	}

	deactivate_parties = yes
}

liberate_slaves = {
	every_scope_pop = {
		limit = {
			is_pop_type = slaves
		}
		if = {
			limit = {
				is_employed = yes
			}
			change_poptype = workplace.type.slaves_role
		}
		else = {
			change_poptype = pop_type:laborers
		}
	}
}

enslave_discriminated_farm_workers = {
	every_scope_pop = {
		limit = {
			is_pop_type = laborers
			pop_acceptance < acceptance_status_4
			OR = {
				pop_employment_building_group = bg_agriculture
				pop_employment_building_group = bg_ranching
				pop_employment_building_group = bg_plantations			
			}
		}
		change_poptype = pop_type:slaves
	}
}

save_revolution_scopes = {
	random_civil_war = {
		save_scope_as = ongoing_revolution
		political_movement = {
			save_scope_as = ongoing_revolution_movement
		}
	}
}

save_agitator_law_scopes = {
	if = {
		limit = {
			agitator_supports_enaction = yes
		}
		random_scope_character = {
			limit = {
				has_role = agitator
				OR = {
					law_enactment_stance = {
						law = owner.currently_enacting_law.type
						value > neutral
					}
					AND = {	
						law_enactment_stance = {
							law = owner.currently_enacting_law.type
							value = neutral
						}
						interest_group = {
							law_enactment_stance = {
								law = owner.currently_enacting_law.type
								value > neutral
							}
						}
					}
				}
			}
			save_scope_as = supporting_agitator
			interest_group = {
				save_scope_as = agitator_ig
			}
		}
		random_political_movement = {
			limit = {
				law_enactment_stance = {
					law = owner.currently_enacting_law.type
					value > neutral
				}
			}
			save_scope_as = supporting_movement
		}
	}
	
	if = {
		limit = {
			agitator_opposes_enaction = yes
		}
		random_scope_character = {
			limit = {
				has_role = agitator
				OR = {
					law_enactment_stance = {
						law = owner.currently_enacting_law.type
						value < neutral
					}
					AND = {	
						law_enactment_stance = {
							law = owner.currently_enacting_law.type
							value = neutral
						}
						interest_group = {
							law_enactment_stance = {
								law = owner.currently_enacting_law.type
								value < neutral
							}
						}
					}
				}
			}
			save_scope_as = opposing_agitator
			interest_group = {
				save_scope_as = agitator_ig
			}
		}
		random_political_movement = {
			limit = {
				law_enactment_stance = {
					law = owner.currently_enacting_law.type
					value < neutral
				}
			}
			save_scope_as = opposing_movement
		}
	}
}

generate_french_monarch = {
	hidden_effect = {
		if = {
			limit = {
				any_scope_character = {
					is_heir = yes
				}
			}
			random_scope_character = {
				limit = {
					is_heir = yes
				}
				kill_character = yes
			}
		}
	}
	if = {
		limit = {
			has_variable = orleanist_restoration_var
		}
		if = {
			limit = {
				year < 1850
			}
			if = {
				limit = {
					any_scope_character = {
						has_template = FRA_louis_philippe
					}
				}
				random_scope_character = {
					limit = {
						has_template = FRA_louis_philippe
					}
					set_character_as_ruler = yes
				}
			}
			else_if = {
				limit = {
					any_scope_character = {
						has_template = FRA_ferdinand_philippe
						is_ruler = no
					}
				}
				random_scope_character = {
					limit = {
						has_template = FRA_ferdinand_philippe
					}
					set_character_as_ruler = yes
				}
			}
			else = {
				create_character = {
					template = FRA_ferdinand_philippe
				}
			}
		}
		else_if = {
			limit = {
				year >= 1850
				year < 1894
			}
			create_character = {
				template = FRA_philippe_de_orleans_of_paris
				on_created = {
					set_character_as_ruler = yes
					add_character_role = politician	
				}
			}
			if = {
				limit = {
					year >= 1870
					year < 1894
				}
				create_character = {
					template = FRA_philippe_de_orleans_of_orleans
				}
			}
		}
		else_if = {
			limit = {
				year >= 1894
				year < 1926
			}
			create_character = {
				template = FRA_philippe_de_orleans_of_orleans
				on_created = {
					set_character_as_ruler = yes
					add_character_role = politician	
				}
			}
			create_character = {
				template = FRA_jean_de_orleans
			}
		}
		else_if = {
			limit = {
				year >= 1926
			}
			create_character = {
				template = FRA_jean_de_orleans
				on_created = {
					set_character_as_ruler = yes
					add_character_role = politician	
				}
			}
			create_character = {
				template = FRA_henri_de_orleans
			}
		}
	}
	else_if = {
		limit = {
			has_variable = legitimist_restoration_var
		}
		if = {
			limit = {
				year < 1844
			}
			create_character = {
				template = FRA_louis_antoine_de_bourbon
				on_created = {
					set_character_as_ruler = yes
					add_character_role = politician	
				}
			}
			create_character = {
				template = FRA_henri_de_bourbon
			}
		}
		else_if = {
			limit = {
				year >= 1844
				year < 1883
			}
			create_character = {
				template = FRA_henri_de_bourbon
				on_created = {
					set_character_as_ruler = yes
					add_character_role = politician	
				}
			}
			create_character = {
				template = FRA_jean_de_bourbon
			}
		}
		else_if = {
			limit = {
				year >= 1883
				year < 1887
			}
			create_character = {
				template = FRA_jean_de_bourbon
				on_created = {
					set_character_as_ruler = yes
					add_character_role = politician	
				}
			}
			create_character = {
				template = FRA_carlos_de_bourbon
			}
		}
		else_if = {
			limit = {
				year >= 1887
				year < 1909
			}
			create_character = {
				template = FRA_carlos_de_bourbon
				on_created = {
					set_character_as_ruler = yes
					add_character_role = politician	
				}
			}
			create_character = {
				template = FRA_jacques_de_bourbon
			}
		}
		else_if = {
			limit = {
				year >= 1909
				year < 1931
			}
			create_character = {
				template = FRA_jacques_de_bourbon
				on_created = {
					set_character_as_ruler = yes
					add_character_role = politician			
				}
			}
			create_character = {
				template = FRA_alfonso_carlos_de_bourbon
			}
		}
		else_if = {
			limit = {
				year >= 1931
			}
			create_character = {
				template = FRA_alfonso_carlos_de_bourbon
				on_created = {
					set_character_as_ruler = yes
					add_character_role = politician
				}
			}
			create_character = {
				template = FRA_alfonso_de_bourbon
			}
		}
	}
	else_if = {
		limit = {
			has_variable = bonapartist_restoration_var
		}
	#		limit = { # Joseph and Louis commented out due Louis-Napoleon taking precedence, and due to them not having any real designs on the throne.
	#			year < 1844
	#		}
	#		create_character = {
	#			# Joseph-Napoléon Bonaparte
	#			first_name = "Joseph"
	#			last_name = "Bonaparte"
	#			ruler = yes
	#			birth_date = 1768.1.7
	#			culture = cu:corsican
	#			interest_group = ig_landowners
	#			ideology = ideology_bonapartist
	#			traits = {
	#				ambitious
	#				basic_diplomat
	#			}
	#			on_created = {
	#				set_variable = {
	#					name = bonapartist_leader
	#				}				
	#			}
	#		}
	#		create_character = {
	#			# Louis Napoléon Bonaparte
	#			first_name = "Louis"
	#			last_name = "Bonaparte"
	#			heir = yes
	#			birth_date = 1778.9.2
	#			culture = cu:corsican
	#			interest_group = ig_armed_forces
	#			ideology = ideology_bonapartist
	#			traits = {
	#				basic_artillery_commander
	#				meticulous
	#				tactful
	#			}
	#			on_created = {
	#				set_variable = {
	#					name = bonapartist_leader
	#				}				
	#			}
	#		}
	#	}
	#	else_if = {
	#		limit = {
	#			year >= 1844
	#			year < 1846
	#		}
	#		create_character = {
	#			# Louis Napoléon Bonaparte
	#			first_name = "Louis"
	#			last_name = "Bonaparte"
	#			ruler = yes
	#			birth_date = 1778.9.2
	#			culture = cu:corsican
	#			interest_group = ig_armed_forces
	#			ideology = ideology_bonapartist
	#			traits = {
	#				basic_artillery_commander
	#				meticulous
	#				tactful
	#			}
	#			on_created = {
	#				set_variable = {
	#					name = bonapartist_leader
	#				}				
	#			}
	#		}
	#		create_character = {
	#			# Charles Louis Napoléon Bonaparte
	#			first_name = "Louis-Napoleon"
	#			last_name = "Bonaparte"
	#			heir = yes
	#			birth_date = 1808.4.20
	#			culture = cu:french
	#			interest_group = ig_petty_bourgeoisie
	#			ideology = ideology_bonapartist
	#			traits = {
	#				ambitious
	#				experienced_political_operator
	#				demagogue
	#			}
	#			on_created = {
	#				set_variable = {
	#					name = bonapartist_leader
	#				}				
	#			}
	#		}
	#	}
		if = {
			limit = {
				year < 1873
			}
			if = {
				limit = {
					any_scope_character = {
						has_variable = napoleon_iii_var
					}
				}
				random_scope_character =  {
					limit = {
						has_variable = napoleon_iii_var
					}
					set_character_as_ruler = yes
					add_character_role = politician
					if = {
						limit = {
							has_role = agitator
						}
						remove_character_role = agitator
					}
				}
			}
			else_if = {
				limit = {
					any_character_in_exile_pool = {
						has_variable = napoleon_iii_var
					}
				}
				random_character_in_exile_pool =  {
					limit = {
						has_variable = napoleon_iii_var
					}
					transfer_character = root
					hidden_effect = {
						free_from_exile_effect = yes
					}
					set_character_as_ruler = yes
					add_character_role = politician
					if = {
						limit = {
							has_role = agitator
						}
						remove_character_role = agitator
					}
				}
			}
			else_if = {
				limit = {
					any_country = {
						NOT = {
							this = root
						}
						any_scope_character = {
							has_variable = napoleon_iii_var
						}
					}
				}
				random_country = {
					limit = {
						NOT = {
							this = root
						}
						any_scope_character = {
							has_variable = napoleon_iii_var
						}
					}
					random_scope_character = {
						limit = {
							has_variable = napoleon_iii_var
						}
						kill_character = {
							hidden = yes
						}
					}
					post_notification = napoleon_iii_leaves_country
				}
				create_character = {
					template = fra_napoleon_iii_character_template
					on_created = {
						set_variable = {
							name = bonapartist_leader
						}		
						set_variable = napoleon_iii_var	
						set_global_variable = napoleon_iii_spawn
						set_character_as_ruler = yes
						add_character_role = politician
						remove_character_role = agitator
					}
				}
			}
			else = {
				create_character = {
					template = fra_napoleon_iii_character_template
					on_created = {
						set_variable = {
							name = bonapartist_leader
						}		
						set_variable = napoleon_iii_var
						set_global_variable = napoleon_iii_spawn
						set_character_as_ruler = yes	
						add_character_role = politician	
						remove_character_role = agitator
					}
				}
			}
			if = {
				limit = {
					year >= 1857
					year < 1873
				}
				create_character = {
					template = FRA_napoleon_eugene_louis_bonaparte
				}
			}
		}
		else_if = {
			limit = {
				year >= 1873
				year < 1879
			}
			create_character = {
				template = FRA_napoleon_eugene_louis_bonaparte
				on_created = {
					set_character_as_ruler = yes
					add_character_role = politician
				}
			}
			create_character = {
				template = FRA_victor_bonaparte
			}
		}
		else_if = {
			limit = {
				year >= 1879
				year < 1926
			}
			create_character = {
				template = FRA_victor_bonaparte
				on_created = {
					set_character_as_ruler = yes
					add_character_role = politician
				}
			}
			if = {
				limit = {
					year >= 1915
					year < 1926
				}
				create_character = {
					template = FRA_louis_bonaparte
				}
			}
		}
		else_if = {
			limit = {
				year >= 1926
			}
			create_character = {
				template = FRA_louis_bonaparte
				on_created = {
					set_character_as_ruler = yes
					add_character_role = politician
				}
			}
		}
	}
	random_scope_character = {
		limit = {
			is_ruler = yes
		}
		save_scope_as = french_monarch_scope
	}
}

clean_up_exile_character_roles = { # scope: character
	if = {
		limit = {
			NOT = { has_role = agitator }
		}
		add_character_role = agitator
	}
	if = {
		limit = {
			has_role = politician
		}
		remove_character_role = politician
	}
	if = {
		limit = {
			has_role = general
		}
		remove_character_role = general
	}
	if = {
		limit = {
			has_role = admiral
		}
		remove_character_role = admiral
	}
}

remove_war_disease_modifier = { #used to remove modifiers from nursing_events.1 and je_war_nursing
    if = {
        limit = {
            has_modifier = war_wounded_disease
        }
        remove_modifier = war_wounded_disease
    }
    if = {
        limit = {
            has_modifier = war_wounded_civilian_assistance
        }
        remove_modifier = war_wounded_civilian_assistance
    }
}

unification_claims_effect = {
	if = {
		limit = {
			any_state_region = {
				any_scope_state = {
					is_homeland_of_country_cultures = ROOT
					NOT = { owner = ROOT }
					NOT = { has_claim_by = ROOT }
				}
			}
		}
		every_state_region = {
			limit = {
				any_scope_state = {
					is_homeland_of_country_cultures = ROOT
					NOT = { owner = ROOT }
					NOT = { has_claim_by = ROOT }
				}
			}
			add_claim = ROOT
		}
	}
	else = {
		add_loyalists = {
			value = 0.05
		}
	}
}